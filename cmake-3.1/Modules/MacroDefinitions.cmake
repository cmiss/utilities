MACRO( GET_AVAILABLE_USER_INTERFACES )
	# Get a list of available user interfaces
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
		SET( AVAILABLE_USER_INTERFACES console gtk wx )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
		SET( AVAILABLE_USER_INTERFACES console gtk wx win32 )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
		SET( AVAILABLE_USER_INTERFACES carbon wx )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
ENDMACRO( GET_AVAILABLE_USER_INTERFACES )

MACRO( GET_COMPILER_NAME )
	# Get the compiler name
	IF( MINGW )
		SET( COMPILER_NAME "mingw" )
	ENDIF( MINGW )
	IF( MSYS )
		SET( COMPILER_NAME "msys" )
	ENDIF( MSYS )
	IF( BORLAND )
		SET( COMPILER_NAME "borland" )
	ENDIF( BORLAND )
	IF( WATCOM )
		SET( COMPILER_NAME "watcom" )
	ENDIF( WATCOM )
	IF( MSVC OR MSVC_IDE OR MSVC60 OR MSVC70 OR MSVC71 OR MSVC80 OR CMAKE_COMPILER_2005 OR MSVC90 )
		SET( COMPILER_NAME "msvc" )
	ENDIF( MSVC OR MSVC_IDE OR MSVC60 OR MSVC70 OR MSVC71 OR MSVC80 OR CMAKE_COMPILER_2005 OR MSVC90 )
	IF( CMAKE_COMPILER_IS_GNUCC )
		SET( COMPILER_NAME "gcc" )
	ENDIF( CMAKE_COMPILER_IS_GNUCC )
	IF( CMAKE_COMPILER_IS_GNUCXX )
		SET( COMPILER_NAME "gxx" )
	ENDIF( CMAKE_COMPILER_IS_GNUCXX )
	IF( CYGWIN )
		SET( COMPILER_NAME "cygwin" )
	ENDIF( CYGWIN )
ENDMACRO( GET_COMPILER_NAME )

MACRO( DEFINE_TARGET_NAME )
	# Define a basic or verbose target name
	IF( ${CMGUI_TARGET_NAME_FORMAT} MATCHES "[Bb]asic" )
		SET( TARGET_NAME "cmgui" )
	ELSE( ${CMGUI_TARGET_NAME_FORMAT} MATCHES "[Bb]asic" )
		GET_COMPILER_NAME( )
		SET( TARGET_NAME "cmgui" )
		IF( BUILD_ABI )
			SET( TARGET_NAME ${TARGET_NAME}-64 )
		ENDIF( BUILD_ABI )
		IF( CMGUI_USER_INTERFACE )
			SET( TARGET_NAME ${TARGET_NAME}-${CMGUI_USER_INTERFACE} )
		ENDIF( CMGUI_USER_INTERFACE )
		IF( COMPILER_NAME )
			SET( TARGET_NAME ${TARGET_NAME}-${COMPILER_NAME} )
		ENDIF( COMPILER_NAME )
		IF( NOT CMGUI_BUILD_EXECUTABLE )
			IF( "${BUILD_LIBRARY_TYPE}" STREQUAL "SHARED" )
				SET( TARGET_NAME ${TARGET_NAME}-static )
				#SET( TARGET_NAME ${TARGET_NAME}-dynamic )
			ELSE( "${BUILD_LIBRARY_TYPE}" STREQUAL "SHARED" )
				SET( TARGET_NAME ${TARGET_NAME}-shared )
			ENDIF( "${BUILD_LIBRARY_TYPE}" STREQUAL "SHARED" )
		ENDIF( NOT CMGUI_BUILD_EXECUTABLE )
		IF( BUILD_MEMORYCHECH )
			SET( TARGET_NAME ${TARGET_NAME}-memorycheck )
		ENDIF( BUILD_MEMORYCHECH )
		IF( CMGUI_USE_OPENCASCADE )
			SET( TARGET_NAME ${TARGET_NAME}-cad )
		ENDIF( CMGUI_USE_OPENCASCADE )
	ENDIF( ${CMGUI_TARGET_NAME_FORMAT} MATCHES "[Bb]asic" )
ENDMACRO( DEFINE_TARGET_NAME )

MACRO( DEFINE_ARCHITECTURE_DIR )
	STRING( TOLOWER ${CMAKE_SYSTEM_NAME} OPERATING_SYSTEM ) 
	IF(CMAKE_CL_64)
		SET( ARCHITECTURE_DIR ${CMAKE_SYSTEM_PROCESSOR}_64-${OPERATING_SYSTEM} )
	ELSE(CMAKE_CL_64)
		SET( ARCHITECTURE_DIR ${CMAKE_SYSTEM_PROCESSOR}-${OPERATING_SYSTEM} )
	ENDIF(CMAKE_CL_64)
	#MESSAGE( STATUS "Architecture dir: ${ARCHITECTURE_DIR}" )
ENDMACRO( DEFINE_ARCHITECTURE_DIR )

MACRO( SET_PLATFORM_DEFINES )
	# Define platform defines:
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
		SET( GENERIC_PC TRUE )
		SET( CMGUI TRUE )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Linux" )
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
		SET( GENERIC_PC TRUE )
		SET( CMGUI TRUE )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
		SET( CMGUI TRUE)
		SET( DARWIN TRUE)
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
ENDMACRO( SET_PLATFORM_DEFINES )

MACRO( PRINT_LIST_DUPLICATIONS CHECK_LIST_NAME )
	# If there are any duplications in the given list 
	# the duplications will be printed out.
	SET(CHECK_LIST ${${CHECK_LIST_NAME}})
	SET( DUP_FREE_LIST ${CHECK_LIST} )
	LIST( REMOVE_DUPLICATES DUP_FREE_LIST )
	SET( INDEX_LIST )
	FOREACH( LIST_ITEM DUP_FREE_LIST ${CHECK_LIST} )
		LIST( FIND DUP_FREE_LIST ${LIST_ITEM} LIST_ITEM_INDEX )
		LIST( FIND INDEX_LIST ${LIST_ITEM_INDEX} LIST_ITEM_INDEX_INDEX )
		IF( ${LIST_ITEM_INDEX_INDEX} LESS 0 )
			LIST( APPEND INDEX_LIST ${LIST_ITEM_INDEX} )
		ELSE( ${LIST_ITEM_INDEX_INDEX} LESS 0 )
			LIST( APPEND DUPLICATE_LIST ${LIST_ITEM} )
		ENDIF( ${LIST_ITEM_INDEX_INDEX} LESS 0 )
	ENDFOREACH( LIST_ITEM DUP_FREE_LIST ${CHECK_LIST} )
	LIST( LENGTH DUPLICATE_LIST DUP_LIST_LENGTH )
	IF( ${DUP_LIST_LENGTH} GREATER 0 )
		MESSAGE( STATUS "Duplicates found: ${CHECK_LIST_NAME}" )
		FOREACH( LIST_ITEM ${DUPLICATE_LIST} )
			MESSAGE( STATUS "Duplicate: ${LIST_ITEM}" )
		ENDFOREACH( LIST_ITEM ${DUPLICATE_LIST} )
	ENDIF( ${DUP_LIST_LENGTH} GREATER 0 )
ENDMACRO( PRINT_LIST_DUPLICATIONS CHECK_LIST )

MACRO( SET_OPERATING_SYSTEM_DEFINES )
	# Define operating system defines:
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
		SET( WIN32_SYSTEM TRUE )
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
	IF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
		SET( CMAKE_OSX_ARCHITECTURES i386;x86_64)
	ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
ENDMACRO( SET_OPERATING_SYSTEM_DEFINES )

MACRO( SET_USER_INTERFACE_DEFINES )
	# Define user interface defines
	IF( ${CMGUI_USER_INTERFACE} MATCHES "win32" )
		SET( WIN32_USER_INTERFACE TRUE )
	ENDIF( ${CMGUI_USER_INTERFACE} MATCHES "win32" )
	IF( ${CMGUI_USER_INTERFACE} MATCHES "gtk" )
		SET( GTK_USER_INTERFACE TRUE )
		IF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" OR USE_GTKMAIN )
			SET( USE_GTK_MAIN_STEP )
		ENDIF( ${CMAKE_SYSTEM_NAME} MATCHES "Windows" OR USE_GTKMAIN )
	ENDIF( ${CMGUI_USER_INTERFACE} MATCHES "gtk" )
	IF( ${CMGUI_USER_INTERFACE} MATCHES "wx" )
		SET( WX_USER_INTERFACE TRUE )
	ENDIF( ${CMGUI_USER_INTERFACE} MATCHES "wx" )
	IF( ${CMGUI_USER_INTERFACE} MATCHES "console" )
		SET( CONSOLE_USER_INTERFACE TRUE )
	ENDIF( ${CMGUI_USER_INTERFACE} MATCHES "console" )
	IF( ${CMGUI_USER_INTERFACE} MATCHES "carbon" )
		SET( CARBON_USER_INTERFACE TRUE )
		SET( TARGET_API_MAC_CARBON TRUE )
	ENDIF( ${CMGUI_USER_INTERFACE} MATCHES "carbon" )
ENDMACRO( SET_USER_INTERFACE_DEFINES )

MACRO( SET_GRAPHICS_DEFINES )
	# Define graphics defines
	IF( ${GRAPHICS_API} MATCHES "OPENGL_GRAPHICS" )
		SET( OPENGL_API TRUE )
		IF( NOT ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
			SET( SELECT_DESCRIPTORS TRUE )
		ENDIF( NOT ${CMAKE_SYSTEM_NAME} MATCHES "Windows" )
	ENDIF( ${GRAPHICS_API} MATCHES "OPENGL_GRAPHICS" )
ENDMACRO( SET_GRAPHICS_DEFINES )

MACRO(Subversion_GET_REVISION DIR VARIABLE)
	# Determine the svn revision of the source in the given directory.
	FIND_PROGRAM(SVN_VERSION_EXECUTABLE svnversion)
	IF( SVN_VERSION_EXECUTABLE )
		EXECUTE_PROCESS(COMMAND ${SVN_VERSION_EXECUTABLE} ${DIR}
			OUTPUT_VARIABLE ${VARIABLE}
			OUTPUT_STRIP_TRAILING_WHITESPACE)
	ELSE()
		FIND_PROGRAM(SVN_EXECUTABLE svn
			DOC "subversion command line client")
		IF( NOT SVN_EXECUTABLE )
			FIND_PROGRAM( TORTOISESVN_EXECUTABLE SubWCRev
				DOC "Tortiose SVN Working Copy client" )
		ENDIF( NOT SVN_EXECUTABLE )
		IF( SVN_EXECUTABLE )
			GET_FILENAME_COMPONENT(SVN_WE ${SVN_EXECUTABLE} NAME_WE)
			EXECUTE_PROCESS(COMMAND ${SVN_WE}version ${DIR}
				OUTPUT_VARIABLE ${VARIABLE}
				OUTPUT_STRIP_TRAILING_WHITESPACE)
			STRING( REGEX MATCH "^([0-9]+[M]?)$" HAVE_REVISION_NUMBER ${${VARIABLE}} )
			SET( REVISION_NUMBER_MATCH ${CMAKE_MATCH_1} )
			STRING( REGEX MATCH "^[0-9]+:([0-9]+[M]?)$" HAVE_REVISION_NUMBER_RANGE ${${VARIABLE}} )
			SET( REVISION_NUMBER_RANGE_MATCH ${CMAKE_MATCH_1} )
			IF( HAVE_REVISION_NUMBER_RANGE )
				#MESSAGE( STATUS "Matched revision range: ${REVISION_NUMBER_RANGE_MATCH} from: ${${VARIABLE}}" )
				SET( ${VARIABLE} ${REVISION_NUMBER_RANGE_MATCH} )
			ELSEIF( HAVE_REVISION_NUMBER )
				#MESSAGE( STATUS "Matched revision number: ${REVISION_NUMBER_MATCH} from: ${${VARIABLE}}" )
				SET( ${VARIABLE} ${REVISION_NUMBER_MATCH} )
			ENDIF( HAVE_REVISION_NUMBER_RANGE )
	
		ELSEIF( TORTOISESVN_EXECUTABLE )
			EXECUTE_PROCESS(COMMAND ${TORTOISESVN_EXECUTABLE} ${DIR}
				OUTPUT_VARIABLE ${VARIABLE}
				OUTPUT_STRIP_TRAILING_WHITESPACE)
			SET( MAX_NUMBER 0 )
			SEPARATE_ARGUMENTS(RESPONSE_LIST WINDOWS_COMMAND "${${VARIABLE}}")
			#MESSAGE( STATUS "TORTOISE SVN RESPONSE: ${RESPONSE_LIST}" )
			FOREACH( RESPONSE_ITEM ${RESPONSE_LIST} )
				STRING( REGEX MATCH "^[0-9]+$" HAVE_NUMBER ${RESPONSE_ITEM} )
				STRING( REGEX MATCH "^[0-9]+:([0-9]+)$" HAVE_NUMBER_RANGE ${RESPONSE_ITEM} )
				IF( HAVE_NUMBER_RANGE )
					SET( HAVE_NUMBER ${CMAKE_MATCH_1} )
				ENDIF( HAVE_NUMBER_RANGE )
				IF( HAVE_NUMBER )
					IF( ${MAX_NUMBER} LESS ${HAVE_NUMBER} )
						SET( MAX_NUMBER ${HAVE_NUMBER} )
					ENDIF( ${MAX_NUMBER} LESS ${HAVE_NUMBER} )
				ENDIF( HAVE_NUMBER )
			ENDFOREACH( RESPONSE_ITEM ${RESPONSE_LIST} )
			SET( ${VARIABLE} ${MAX_NUMBER} )
		ENDIF( SVN_EXECUTABLE )
	ENDIF()
ENDMACRO(Subversion_GET_REVISION)

MACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )
	IF( NOT DEFINED ${OPTION_NAME} )
		SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
	ENDIF( NOT DEFINED ${OPTION_NAME} )

	OPTION( ${OPTION_NAME} "${OPTION_STRING}" ${${OPTION_NAME}} )
ENDMACRO( OPTION_WITH_DEFAULT OPTION_NAME OPTION_STRING OPTION_DEFAULT )

MACRO( CACHE_VAR_WITH_DEFAULT OPTION_NAME OPTION_DEFAULT OPTION_TYPE OPTION_STRING )
	IF( NOT DEFINED ${OPTION_NAME} )
		SET( ${OPTION_NAME} ${OPTION_DEFAULT} )
	ENDIF( NOT DEFINED ${OPTION_NAME} )

	SET( ${OPTION_NAME} "${OPTION_DEFAULT}" CACHE ${OPTION_TYPE} "${OPTION_STRING}" )
ENDMACRO( CACHE_VAR_WITH_DEFAULT OPTION_NAME OPTION_DEFAULT OPTION_TYPE OPTION_STRING )

MACRO( SET_TRUE_IF_NOT_DEFINED VARIABLE )
	IF( NOT DEFINED ${VARIABLE} )
		SET( ${VARIABLE} TRUE )
	ENDIF( NOT DEFINED ${VARIABLE} )
ENDMACRO( SET_TRUE_IF_NOT_DEFINED VARIABLE )

MACRO( SET_FALSE_IF_NOT_DEFINED VARIABLE )
	IF( NOT DEFINED ${VARIABLE} )
		SET( ${VARIABLE} FALSE )
	ENDIF( NOT DEFINED ${VARIABLE} )
ENDMACRO( SET_FALSE_IF_NOT_DEFINED VARIABLE )


